# -*- coding: utf-8 -*-
"""FarmerA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Gv5FlIR1_Rba8pBNrz3A48kFikqr-OEr
"""



from google.colab import files

uploaded = files.upload()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('Nigeria_Weather_Crop_Data_Combined.csv')
df.head()

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=1)
print(x_train.shape)

"""After running the cell above, a file picker will appear. Select the file you want to upload. Once uploaded, the `uploaded` variable will contain a dictionary where keys are the filenames and values are the file contents as bytes."""

# Define your features (x) and target variable (y)
# Replace 'YourTargetColumn' with the actual name of the column you want to predict
x = df.drop(['Yield Impact Crop 1 (%)','Yield Impact Crop 2 (%)','Yield Impact Crop 3 (%)'], axis=1) # Example: dropping the target column to get features
y = df['Yield Impact Crop 1 (%)'] # Example: selecting the target column

# Now, split the data
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=1)
print(x_train.shape)

print(x_train)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LinearRegression

# Identify categorical columns
categorical_features = x_train.select_dtypes(include=['object']).columns

# Create a column transformer to apply one-hot encoding to categorical features
preprocessor = ColumnTransformer(
    transformers=[
        ('onehot', OneHotEncoder(handle_unknown='ignore'), categorical_features)
    ],
    remainder='passthrough' # Keep the remaining numerical columns
)

# Create a pipeline with the preprocessor and Linear Regression model
model = Pipeline(steps=[('preprocessor', preprocessor),
                      ('regressor', LinearRegression())])

# Train the model
model.fit(x_train, y_train)



from sklearn.metrics import mean_squared_error, r2_score

# Make predictions on the test set
y_pred = model.predict(x_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.xlabel("Actual Yield Impact Crop 1 (%)")
plt.ylabel("Predicted Yield Impact Crop 1 (%)")
plt.title("Actual vs. Predicted Yield Impact Crop 1 (%)")
plt.grid(True)
plt.show()

import joblib